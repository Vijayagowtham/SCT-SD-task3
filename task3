def print_grid(grid):
    print("\n Sudoku Grid:")
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("-" * 21)
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("|", end=" ")
            print(grid[i][j] if grid[i][j] != 0 else ".", end=" ")
        print()
    print()

def find_empty(grid):
    """Find the next empty cell in the Sudoku grid (marked with 0)."""
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                return row, col  # Return row, col of empty cell
    return None  # No empty cells left

def is_valid(grid, num, row, col):
    """Check if placing 'num' at (row, col) is valid under Sudoku rules."""

    # Check row
    if num in grid[row]:
        return False

    # Check column
    if num in [grid[i][col] for i in range(9)]:
        return False

    # Check 3x3 box
    start_row = row - row % 3
    start_col = col - col % 3
    for i in range(3):
        for j in range(3):
            if grid[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(grid):
    """Recursive backtracking solver function."""
    empty = find_empty(grid)
    if not empty:
        return True  # No empty cells, puzzle solved!

    row, col = empty

    for num in range(1, 10):
        if is_valid(grid, num, row, col):
            grid[row][col] = num  # Try this number

            if solve_sudoku(grid):
                return True  # Recursively proceed

            grid[row][col] = 0  # Backtrack

    return False  # Trigger backtracking

def main():
    # Sudoku puzzle (0 represents an empty cell)
    puzzle = [
        [5, 3, 0, 0, 7, 0, 0, 0, 0],
        [6, 0, 0, 1, 9, 5, 0, 0, 0],
        [0, 9, 8, 0, 0, 0, 0, 6, 0],
        [8, 0, 0, 0, 6, 0, 0, 0, 3],
        [4, 0, 0, 8, 0, 3, 0, 0, 1],
        [7, 0, 0, 0, 2, 0, 0, 0, 6],
        [0, 6, 0, 0, 0, 0, 2, 8, 0],
        [0, 0, 0, 4, 1, 9, 0, 0, 5],
        [0, 0, 0, 0, 8, 0, 0, 7, 9]
    ]

    print(" Sudoku Solver\n")
    print(" Here's your puzzle:")
    print_grid(puzzle)

    if solve_sudoku(puzzle):
        print(" Puzzle solved successfully!")
        print_grid(puzzle)
    else:
        print(" Oops! This Sudoku puzzle has no valid solution.")

if __name__ == "__main__":
    main()
